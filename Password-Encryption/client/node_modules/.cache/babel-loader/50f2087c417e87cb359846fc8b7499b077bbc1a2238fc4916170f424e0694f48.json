{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Letsupgrade\\\\GITHUBASSIGNMENT\\\\Assignment\\\\Password-Encryption\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [password, setPassword] = useState('');\n  const [encryptedPassword, setEncryptedPassword] = useState('');\n  const [decryptedPassword, setDecryptedPassword] = useState('');\n  const handleEncrypt = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/encrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password\n        })\n      });\n      const data = await response.json();\n      setEncryptedPassword(data.encryptedPassword);\n      console.log(data.encryptedPassword);\n    } catch (error) {\n      console.error('Error encrypting password:', error);\n    }\n  };\n  const handleDecrypt = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/decrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          encryptedPassword,\n          iv: 'your-iv',\n          // Replace with the actual IV received from the encryption response\n          key: 'your-key' // Replace with the actual key received from the encryption response\n        })\n      });\n\n      const data = await response.json();\n      setDecryptedPassword(data.decryptedPassword);\n    } catch (error) {\n      console.error('Error decrypting password:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Password Encrypter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Enter Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncrypt,\n      children: \"Encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Encrypted Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: encryptedPassword,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDecrypt,\n      children: \"Decrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Decrypted Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: decryptedPassword,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d0gqW/4Km4Yqgj6rIKwPvEvq3is=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","password","setPassword","encryptedPassword","setEncryptedPassword","decryptedPassword","setDecryptedPassword","handleEncrypt","response","fetch","method","headers","body","JSON","stringify","data","json","console","log","error","handleDecrypt","iv","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/sahil/Letsupgrade/GITHUBASSIGNMENT/Assignment/Password-Encryption/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [password, setPassword] = useState('');\n  const [encryptedPassword, setEncryptedPassword] = useState('');\n  const [decryptedPassword, setDecryptedPassword] = useState('');\n\n  const handleEncrypt = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/encrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ password }),\n      });\n\n      const data = await response.json();\n      setEncryptedPassword(data.encryptedPassword);\n      console.log(data.encryptedPassword);\n    } catch (error) {\n      console.error('Error encrypting password:', error);\n    }\n  };\n\n  const handleDecrypt = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/decrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          encryptedPassword,\n         iv: 'your-iv', // Replace with the actual IV received from the encryption response\n         key: 'your-key', // Replace with the actual key received from the encryption response\n        }),\n      });\n\n      const data = await response.json();\n      setDecryptedPassword(data.decryptedPassword);\n    } catch (error) {\n      console.error('Error decrypting password:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n    <h1>Password Encrypter</h1>\n    <label>\n      Enter Password:\n      <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n    </label>\n    <br />\n    <button onClick={handleEncrypt}>Encrypt</button>\n    <br />\n    <label>\n      Encrypted Password:\n      <input type=\"text\" value={encryptedPassword} readOnly />\n    </label>\n    <br />\n    <button onClick={handleDecrypt}>Decrypt</button>\n    <br />\n    <label>\n      Decrypted Password:\n      <input type=\"text\" value={decryptedPassword} readOnly />\n    </label>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}